// Copyright 2018 Alex Badics <admin@stickman.hu>
//
// This file is part of Hun-Law.
//
// Hun-Law is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Hun-Law is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Hun-Law.  If not, see <https://www.gnu.org/licenses/>.

start: any_expression+

?any_expression: compound_reference
    | quoted_text
    | anything

compound_reference.100: (act_reference reference?) | reference
reference.300: (article_reference paragraph_reference alphabetic_point_reference alphabetic_subpoint_reference)
    | (article_reference paragraph_reference numeric_point_reference alphabetic_subpoint_reference)
    | (article_reference paragraph_reference alphabetic_point_reference)
    | (article_reference paragraph_reference numeric_point_reference)
    | (article_reference paragraph_reference)
    | (article_reference alphabetic_point_reference alphabetic_subpoint_reference)
    | (article_reference numeric_point_reference alphabetic_subpoint_reference)
    | (article_reference alphabetic_point_reference)
    | (article_reference numeric_point_reference)
    | (article_reference)
    | (paragraph_reference alphabetic_point_reference alphabetic_subpoint_reference)
    | (paragraph_reference numeric_point_reference alphabetic_subpoint_reference)
    | (paragraph_reference alphabetic_point_reference)
    | (paragraph_reference numeric_point_reference)
    | (paragraph_reference)
    | (numeric_point_reference alphabetic_subpoint_reference)
    | (numeric_point_reference)
    | (alphabetic_point_reference alphabetic_subpoint_reference)
    | (alphabetic_point_reference)
    | (alphabetic_subpoint_reference)

act_reference.50: abbreviation | act_id (from_now_on | from_now_on_long)?
from_now_on: "(" "a" "továbbiakban" ":" abbreviation "törvény"? ")"
from_now_on_long: "(" "a" "továbbiakban" ":"  any_word+ "törvény" ")"
act_id: act_year "évi" act_number act_suffix
act_year: NUMBER "."
act_number: roman "."
act_suffix: "törvény" | /törvén[a-zéáőúöüóíű]+/

article_reference.50: ((article_id | article_range) "." list_separator? /az?/?)+ article_suffix
    | (this | previous) article_suffix
article_range: article_id DASH article_id
article_id: (NUMBER ":" )? NUMBER ("/" uc_letter)?
article_suffix: /§-[a-zéáőúöüóíű]+/ | "§"

paragraph_reference.50: (( "(" paragraph_id ")" | paragraph_range) list_separator? /az?/?)+ paragraph_suffix
paragraph_range: "(" paragraph_id ")" DASH "(" paragraph_id ")"
paragraph_id: NUMBER one_letter?
paragraph_suffix: /bekezdés[a-zéáőúöüóíű]+/ | "bekezdés"

alphabetic_point_reference.50: ((alphabetic_point_id ")" | alphabetic_point_range) list_separator? /az?/?)+ point_suffix
alphabetic_point_range: alphabetic_point_id ")" DASH alphabetic_point_id ")"
alphabetic_point_id: "ny" | "sz" |  one_letter

numeric_point_reference.50: ((numeric_point_id | numeric_point_range) "." list_separator? /az?/?)+ point_suffix
numeric_point_range: numeric_point_id DASH numeric_point_id
numeric_point_id: NUMBER ("/"? one_letter)?
point_suffix: /pont[a-zéáőúöüóíű]+/ | "pont"

alphabetic_subpoint_reference.50: ((alphabetic_subpoint_id ")" | alphabetic_subpoint_range) list_separator? /az?/?)+ alphabetic_subpoint_suffix
alphabetic_subpoint_range: alphabetic_subpoint_id ")" DASH alphabetic_subpoint_id ")"
alphabetic_subpoint_id: two_letters
alphabetic_subpoint_suffix: /alpont[a-zéáőúöüóíű]+/ | "alpont"

previous: "az"? "előző"
this: "e" | "ezen"

list_separator: ("," | "és" | "valamint" | "illetve" | "vagy")

quoted_text: "„" anything+ "”"

abbreviation: ucfirst "." | ucfirst "."? "tv."

// -----------------  SPECIAL RULES -------------------
?anything.0: any_word
    | NUMBER
    | "(" | ")"
    | "." | ";" | "?"
    | ":"
    | ","
    | "/"
    | DASH

?any_word.0: _OTHER_WORD
    | _UC_FIRST
    | one_letter
    | uc_letter
    | two_letters
    | ucfirst
    | "évi" | "törvény"
    | "előző" | "ezen"
    | "és" | "valamint" | "illetve" | "vagy"
    | "továbbiakban"
    | act_suffix
    | article_suffix
    | paragraph_suffix
    | point_suffix
    | alphabetic_subpoint_suffix
    | roman

one_letter.0: _ONE_LETTER | "a" | "e"
uc_letter.0: _UC_LETTER | "A" | "I" | "V" | "X" | "L" | "C" | "D" | "M"
two_letters.0: _TWO_LETTERS | "az" | "és"
ucfirst.0: _UC_FIRST
roman.0: "I" | "V" | "X" | "L" | "C" | "D" | "M" | ROMAN_TWO_CHARS

// -----------------     TOKENS     -------------------

_UC_FIRST: /[A-ZÉÁŐÚÖÜÓÍŰ][a-zéáőúöüóíű]{2,100}/
_OTHER_WORD: /[a-zéáőúöüóíűA-ZÉÁŐÚÖÜÓÍŰ\-]{3,100}/
_ONE_LETTER: /[a-zéáőúöüóíű]/
_UC_LETTER: /[A-ZÉÁŐÚÖÜÓÍŰ]/
_TWO_LETTERS: /[a-zéáőúöüóíű]{2}/
NUMBER: "0".."9"+
ROMAN_TWO_CHARS.10: /[IVXLCDM]{2,15}/  //TODO: actual grammar for this.
DASH: "−" | "–" | "-"

WS: /[ \t\f\r\n]/+

OTHER: /[^ „”§()?:\.\t\f\r\n1-9a-zéáőúöüóíűA-ZÉÁŐÚÖÜÓÍŰ–−\/\-]/

%ignore WS
%ignore OTHER

